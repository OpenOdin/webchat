<app style="position:relative; z-index:1;">
    <hr />
    <!-- Set up flex container with screen limited to viewport and more pleasant font settings -->
    <div class="flex font-sans subpixel-antialiased h-screen">
        <div class="flex-none w-64 pb-6 hidden bg-bakgrund-3 md:block">
            <div class="flex mb-2 mt-3 px-4 text-rubriker justify-between">
                <div class="flex-none w-full">
                    <h1 class="mb-1 font-bold text-xl text-rubriker leading-snug truncate">
                        OpenOdin
                    </h1>
                    <h1 class="mb-1 font-bold text-xs text-underrubriker leading-snug truncate">
                        Interoperable Messaging
                    </h1>
                    <div class="h-5">
                    </div>
                    <div class="flex flex-row">
                        <button class="basis-0 text-green-500 bg-white box-border w-10 h-10 border-2 border-green-500 shadow-lg shadow-green-400" type="button" if={this.state.service && this.state.openOdin.isAuthed()}>
                            <div class="w-10 h-10">
                                <minidenticon-svg
                                    username={this.state.service.getPublicKey().toString("hex")}
                                    saturation="60" lightness="50">
                                </minidenticon-svg>
                            </div>
                        </button>
                        <div class="basis-4/5 -px-8 ml-2">
                            <div class="flex flex-col font-bold">
                                <div class="text-underrubriker text-base opacity-80">
                                    { state.name }
                                </div>
                                <div class="w-40 text-underrubriker text-sm font-light italic opacity-80 truncate overflow-hidden text-ellipsis">
                                    { state.bio }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="h-5">
                    </div>
                </div>
            </div>

            <div class="mb-8">
                <div class="px-4 mb-2 text-rubriker flex justify-between items-center">
                    <div class="opacity-75">
                        Active
                    </div>
                    <div>
                        <svg class="fill-current h-4 w-4 opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path d="M3.204 5h9.592L8 10.481 3.204 5zm-.753.659 4.796 5.48a1 1 0 0 0 1.506 0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 0 0-.753 1.659z"/>
                        </svg>
                    </div>
                </div>

                <div each={ publicKey in (state.presenceController?.getActiveList() ?? []) } class="flex items-center mb-3 px-4">
                    <svg class="h-2 w-2 mr-2 fill-current text-green-500" viewBox="0 0 20 20"
                        style="width: 22px">
                        <circle cx="10" cy="10" r="10">
                    </svg>

                    <span class="text-rubriker opacity-75"
                        id="presence_{publicKey.toString("hex")}"
                        onclick={showUserInfo}
                        style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        {publicKey.toString("hex")}
                    </span>
                    <span if={publicKey.equals(this.state.service.getPublicKey())} class="px-2 text-gray-400 text-sm italic">
                        (you)
                    </span>
                </div>

                <div each={ publicKey in (state.presenceController?.getInactiveList() ?? []) } class="flex items-center mb-3 px-4">
                    <svg class="h-2 w-2 stroke-current text-rubriker mr-2" viewBox="0 0 22 22"
                        style="width: 22px">
                        <circle cx="10" cy="10" r="10" fill="none" stroke-width="3">
                    </svg>

                    <span class="text-rubriker opacity-75"
                        id="presence_{publicKey.toString("hex")}"
                        onclick={showUserInfo}
                        style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        {publicKey.toString("hex")}
                    </span>
                    <span if={publicKey.equals(this.state.service.getPublicKey())} class="px-2 text-gray-400 text-sm italic">
                        (you)
                    </span>
                </div>
            </div>

            <div class="mb-8">
                <div class="px-4 mb-2 text-rubriker flex justify-between items-center">
                    <div class="opacity-75">
                        Channels
                    </div>
                    <div>
                        <a onclick={newChannel}>
                            <svg class="fill-current h-4 w-4 opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M11 9h4v2h-4v4H9v-4H5V9h4V5h2v4zm-1 11a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16z" />
                            </svg>
                        </a>
                    </div>
                </div>
                <div class="py-1 px-4 bg-lankar text-rubriker">
                    # SC2
                </div>
                <div class="py-1 px-4 text-rubriker">
                    # Random
                </div>
            </div>

            <div class="mb-8">
                <div class="flex px-4 mb-2 text-rubriker justify-between items-center">
                    <div class="opacity-75">
                        Direct Messages
                    </div>
                    <div>
                        <svg class="fill-current h-4 w-4 opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path d="M14 8a4 4 0 1 0-8 0v7h8V8zM8.027 2.332A6.003 6.003 0 0 0 4 8v6l-3 2v1h18v-1l-3-2V8a6.003 6.003 0 0 0-4.027-5.668 2 2 0 1 0-3.945 0zM12 18a2 2 0 1 1-4 0h4z" fill-rule="evenodd" />
                        </svg>
                    </div>
                </div>

                <div each={item in state.channelListController?.getItems()}
                    if={item.data.isPrivate}
                    id="channel_{item.id1.toString("hex")}"
                    onclick={ () => this.openChannel(item.id1)}
                    class="flex items-center mb-3 px-4">


                    <template if={item.data.controller}>
                        <svg class="h-2 w-2 mr-2 fill-current text-green-500" viewBox="0 0 20 20"
                            if={state.presenceController?.isPresent(item.data.name) &&
                                !state.channelListController.hasNotification(item.id1) }>
                            <circle cx="10" cy="10" r="10">
                        </svg>

                        <svg class="h-2 w-2 stroke-current text-rubriker mr-2" viewBox="0 0 22 22"
                            if={!state.presenceController?.isPresent(item.data.name) &&
                                !state.channelListController.hasNotification(item.id1) }>
                            style="width: 22px">
                            <circle cx="10" cy="10" r="10" fill="none" stroke-width="3">
                        </svg>

                        <svg class="h-2 w-2 mr-2 fill-current text-red-500" viewBox="0 0 20 20"
                            if={state.channelListController.hasNotification(item.id1)}>
                            <circle cx="10" cy="10" r="10">
                        </svg>

                        <span class="text-rubriker opacity-75 {item.data.isActive ? "font-bold" : ""} text-ellipsis overflow-hidden">
                            {item.data.name}
                        </span>
                    </template>

                    <template if={!item.data.controller}>
                        <svg class="h-2 w-2 mr-2 fill-current text-green-500" viewBox="0 0 20 20"
                            if={state.presenceController?.isPresent(item.data.name)}>
                            <circle cx="10" cy="10" r="10">
                        </svg>

                        <svg class="h-2 w-2 stroke-current text-rubriker mr-2" viewBox="0 0 22 22"
                            if={!state.presenceController?.isPresent(item.data.name)}
                            style="width: 22px">
                            <circle cx="10" cy="10" r="10" fill="none" stroke-width="3">
                        </svg>

                        <span title="Notifications are not shown for unopened channels. Click to open channel."
                            class="text-rubriker opacity-75 text-ellipsis overflow-hidden italic">
                            {item.data.name}
                        </span>
                    </template>
                </div>
            </div>
        </div>

        <!-- Main area: chat -->
        <div id="chatArea" class="flex flex-1 flex-col bg-white overflow-hidden">
            <!-- Channel header -->
            <div class="bg-bakgrund-1 border-b flex px-6 py-2 items-center flex-none">
                <div class="flex flex-col">
                    <div if={state.error} style="background-color: red;">
                        <p>Error: {state.error}</p>
                    </div>

                    <div if={!state.openOdin.isActive()}
                        style="display: block; background-color: orange;">
                        <h1>
                            Please activate the OpenOdin Data Wallet browser extension
                            by clicking on the
                            <img src="gfx/openodin-logo.svg" class="w-7 h-7 inline-block">
                            icon in your browser toolbar.
                        </h1>
                    </div>

                    <button if={state.openOdin.isActive() && !state.openOdin.isAuthed() && !state.openOdin.isPendingAuth()}
                        type="button" onclick={ auth } style="background-color: yellow">
                        Click here to request authorization from the Data Wallet.
                    </button>

                    <div if={state.openOdin.isPendingAuth()}
                        style="display: block; background-color: green;">
                        <h1>
                            Now, open the Data Wallet extension to accept or deny the authorization,
                            by clicking on the
                            <img src="gfx/openodin-logo.svg" class="w-7 h-7 inline-block">
                            icon in your browser toolbar.
                        </h1>
                    </div>

                    <div if={state.openOdin.isAuthed()}
                        style="display: block; background-color: white;">
                        <h1>Authorized as {this.state.service.getPublicKey().toString("hex")}</h1>
                        <button type="button" onclick={close}>Logout</button>
                    </div>
                </div>

                <div class="ml-auto hidden md:block">
                </div>
            </div>

            <webchat-channel
                each={item in state.channelListController?.getItems()}
                if={item.data.controller}
                class="{item.data.isActive ? "flex flex-col flex-1 overflow-hidden" : "hidden"}"
                service={state.service}
                controller={item.data.controller}
                item={item}>
            </webchat-channel>
        </div>
    </div>
    <hr />

    <script>
        import * as riot from "riot";

        import WebChatDialogUserInfo from "./webchat-dialog-user-info.riot";

        export default {
            onBeforeMount(props, state) {
                ["mousemove", "keydown", "touchstart"].forEach( (eventName) => {
                    document.addEventListener(eventName, () => {
                        this.state.presenceController?.activityDetected();
                    }, true);
                });

                window.addEventListener("blur", () => this.state.notificationsController?.blurDetected() );
                window.addEventListener("focus", () => this.state.notificationsController?.focusDetected() );

                // Listen generally to messages and react to those of interest,
                // which are notifications sent from channels about new messages.
                window.addEventListener("message", (event) => this.state.notificationsController?.handleMessage(event.data) );

                // Disable drop in general.
                window.addEventListener("dragover", function(e) { e.preventDefault() });
                window.addEventListener("drop", function(e) { e.preventDefault() });

                this.resetState();
            },

            resetState() {
                const openOdin = new this.props.Globals.OpenOdin();

                openOdin.onActive( () => {
                    this.update();
                });

                this.state = {
                    openOdin,
                    presenceController: undefined,
                    channelListController: undefined,
                };
            },

            close() {
                this.state.openOdin.close();

                this.state.presenceController?.close();

                this.state.channelListController?.close();

                this.state.service.stop();

                this.resetState();

                this.update();
            },

            async auth() {
                if (this.state.service) {
                    return;
                }

                this.state.error = "";

                try {
                    // We do this to show updated status about authorization.
                    setTimeout( () => this.update() );

                    await this.state.openOdin.auth();

                    const jsonpath = "/" + (new URLSearchParams(document.location.search).get("conf") || "app.json");

                    console.debug("Loading JSON conf file:", jsonpath);

                    let appConf;

                    try {
                        const appJSON = await (await fetch(jsonpath)).json();

                        appConf = this.props.Globals.ParseUtil.ParseApplicationConf(appJSON);
                    }
                    catch(e) {
                        console.error(`Could not load and parse ${jsonpath} JSON config file`, e);

                        alert(`Could not load and parse ${jsonpath} JSON config file`);

                        return;
                    }

                    this.connect(appConf);
                }
                catch(e) {
                    this.update({
                        error: e.message,
                    });
                }
            },

            async connect(appConf) {
                if (!this.state.openOdin.isAuthed()) {
                    return;
                }

                const service = await this.state.openOdin.initService(appConf);

                service.onStorageConnect( () => {
                    // TODO: show in the UI that we are "Connected to storage"
                    // When configured for local storage we are always connected, but in case of using
                    // a remote storage over websocket it will make sense showing the status.

                    console.info("Connected to storage");
                    this.handleStorageConnect();
                });

                service.onStorageClose( () => {
                    // TODO: show in UI "not connected to storage".
                    //

                    console.error("Disconnected from storage");

                    this.handleStorageClose();
                });

                service.onStorageParseError( (error) => {
                    console.error("Could not parse storage configuraton", error.message);
                });


                service.onPeerConnect( (p2pClient) => {
                    // TODO: keep count of connected peers and show in the UI as "Connected to # peer(s)".
                    //

                    const pubKey = p2pClient.getRemotePublicKey();
                    console.info(`Peer connected: ${pubKey.toString("hex")}`);

                    p2pClient.onMessagingError( (message) => {
                        console.error("Error in peer", message);
                    });

                    p2pClient.onMessagingPong( (roundTripTime) => {
                        // TODO: show this round trip value in the UI instead of in the console.
                        console.info("Ping/pong round trip time [ms]", roundTripTime);
                    });
                });

                service.onPeerClose( (p2pClient) => {
                    // TODO: decrease count of connected peers and update UI.
                    //

                    const pubKey = p2pClient.getRemotePublicKey();
                    console.info(`Peer disconnected: ${pubKey.toString("hex")}`);
                });

                service.onPeerAuthCertError( (error, authCert) => {
                    console.warning("Peer's auth cert not valid");
                });

                service.onPeerParseError( (error) => {
                    console.error("Could not parse peer configuraton", error.message);
                });

                service.onPeerFactoryCreate( (handshakeFactory) => {
                    handshakeFactory.onSocketFactoryError( (name, error) => {
                        console.error("Socket error", name, error.message);
                    });

                    handshakeFactory.onHandshakeError( (error) => {
                        console.error("Handshake error", error.message);
                    });
                });

                this.update({
                    service,
                });

                service.start();
            },

            handleStorageConnect() {
                this.update({
                    connected: true,
                });

                this.state.presenceController = new this.props.Globals.PresenceController({}, this.state.service);
                this.state.presenceController.onUpdate(() => this.update()).onClose( () => console.error("Presence thread was closed") );

                this.state.notificationsController = new this.props.Globals.NotificationsController(document.title);

                this.state.notificationsController.onNotification( (notification) => {
                    if (notification.title) {
                        document.title = notification.title;
                    }
                });

                this.state.presenceController.onActive( () => this.state.notificationsController?.focusDetected() );
                this.state.presenceController.onInactive( () => this.state.notificationsController?.blurDetected() );

                this.state.channelListController = new this.props.Globals.ChannelListController({}, this.state.service);

                this.state.channelListController.onUpdate(() => this.update()).onClose( () => console.error("Channels thread was closed") );
            },

            handleStorageClose() {
                this.update({
                    connected: false,
                });
            },

            async showUserInfo(event) {
                event.preventDefault();

                const publicKey = Buffer.from(event.target.id.split("_")[1], "hex");

                const modal = riot.component(WebChatDialogUserInfo)
                    (this.root.appendChild(document.createElement("DIV")), {publicKey});

                const ret = await modal.showModal();

                if (!ret) {
                    return;
                }

                if (ret.action === "message") {
                    const channelNode = await this.state.channelListController.makePrivateChannel(publicKey);

                    // TODO: optimize
                    setTimeout( () => this.openChannel(channelNode.getId1()), 1000);
                }
            },

            openChannel(nodeId1) {
                this.state.channelListController.openChannel(nodeId1);

                this.state.channelListController.setChannelActive(nodeId1);

                this.update();
            }
        }
    </script>
</app>
