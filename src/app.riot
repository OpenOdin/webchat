<app style="position:relative; z-index:1;">
    <hr />
    <!-- Set up flex container with screen limited to viewport and more pleasant font settings -->
    <div class="flex font-sans subpixel-antialiased h-screen">
        <div class="flex-none w-64 pb-6 hidden bg-bakgrund-3 md:block">
            <div class="flex mb-2 mt-3 px-4 text-rubriker justify-between">
                <div class="flex-none w-full">
                    <h1 class="mb-1 font-bold text-xl text-rubriker leading-snug truncate">
                        OpenOdin
                    </h1>
                    <h1 class="mb-1 font-bold text-xs text-underrubriker leading-snug truncate">
                        Interoperable Messaging
                    </h1>
                    <div class="h-5">
                    </div>
                    <div class="flex flex-row">
                        <button class="basis-0 text-green-500 bg-white box-border w-10 h-10 border-2 border-green-500 shadow-lg shadow-green-400" type="button" if={this.state.openOdin?.isAuthed()}>
                            <div class="w-10 h-10"
                                title={this.state.service.getPublicKey().toString("hex")}>
                                <minidenticon-svg
                                    username={this.state.service.getPublicKey().toString("hex")}
                                    saturation="60" lightness="50">
                                </minidenticon-svg>
                                <button type="button" onclick={state.openOdin.close} class="text-xs">Logout</button>
                            </div>
                        </button>
                        <div class="basis-4/5 -px-8 ml-2">
                            <div class="flex flex-col font-bold">
                                <div if={state.storageConnected}class="text-underrubriker text-base opacity-80">
                                    Connected to storage
                                </div>
                                <div if={!state.storageConnected}class="text-underrubriker text-base opacity-80">
                                    Not connected to storage
                                </div>

                                <div class="text-underrubriker text-base opacity-80">
                                    Syncing with {state.connectedPeers} peer(s)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="h-5">
                    </div>
                </div>
            </div>

            <div class="mb-8">
                <div class="px-4 mb-2 text-rubriker flex justify-between items-center">
                    <div class="opacity-75">
                        Active
                    </div>
                    <div>
                        <svg class="fill-current h-4 w-4 opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path d="M3.204 5h9.592L8 10.481 3.204 5zm-.753.659 4.796 5.48a1 1 0 0 0 1.506 0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 0 0-.753 1.659z"/>
                        </svg>
                    </div>
                </div>

                <div style="min-height: 100px; max-height: 300px; overflow-y: scroll; scrollbar-width: thin; scrollbar-color: #0ac507 #484848;">
                    <div each={ presence in (state.presenceController?.getList() ?? []) }
                        class={"flex items-center mb-3 px-4 " + (state.channelListController.peerOfActive(presence.publicKey) ? "activeUser" : "") }>
                        <div class="presence-menu w-5 h-5">
                            <minidenticon-svg
                                username={presence.publicKey.toString("hex")}
                                saturation="60" lightness="50">
                            </minidenticon-svg>

{
    setVariable(state.channelListController.hasUserNotification(presence.publicKey) ? (presence.isActive ? "red" : "hollow-red") : (presence.isActive ? "green" : "hollow"))

}

                            <svg if={getVariable()=="green"}
                                class="h-2 w-2 mr-2 fill-current text-green-500"
                                viewBox="0 0 20 20"
                                style="width: 22px; position: relative; left:13px; bottom:12px;">
                                <circle cx="10" cy="10" r="10">
                            </svg>

                            <svg if={getVariable()=="hollow"}
                                class="h-2 w-2 mr-2 stroke-current text-gray-400"
                                viewBox="0 0 20 20"
                                style="width: 22px; position: relative; left:13px; bottom:12px;">
                                <circle cx="10" cy="10" r="10" fill="none" stroke-width="3">
                            </svg>

                            <svg if={getVariable()=="red"}
                                class="h-2 w-2 mr-2 fill-current text-red-500"
                                viewBox="0 0 20 20"
                                style="width: 22px; position: relative; left:13px; bottom:12px;">
                                <circle cx="10" cy="10" r="10">
                            </svg>

                            <svg if={getVariable()=="hollow-red"}
                                class="h-2 w-2 mr-2 text-red-500 stroke-current"
                                viewBox="0 0 20 20"
                                style="width: 22px; position: relative; left:13px; bottom:12px;">
                                <circle cx="10" cy="10" r="10" fill="none" stroke-width="3">
                            </svg>

                            <div class="presence-content border-2 border-blue-100 shadow-lg">
                                <div class="w-5 h-5 rounded mr-3">
                                    <minidenticon-svg
                                        username={presence.publicKey.toString("hex")}
                                        saturation="60" lightness="50">
                                    </minidenticon-svg>
                                </div>

                                <div>
                                    <div each={channel in state.channelListController.getPrivateChannels(presence.publicKey)}>
                                        <a class="{state.channelListController.hasNotification(channel.id1) ? "bg-red-400" : ""}
                                            "href="#"
                                            onclick={ () => this.openChannel(channel.id1)}>
                                            {channel.name || "<no name>"}
                                        </a>
                                    </div>
                                </div>

                                <div class="opacity-75"
                                    id="presencenewchannel_{presence.publicKey.toString("hex")}"
                                    onclick={showUserInfo}
                                    style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    New private channel
                                </div>
                            </div>
                        </div>

                        <span class="text-rubriker opacity-75 px-3"
                            id="presence_{presence.publicKey.toString("hex")}"
                            onclick={ (e) => {
                                const defaultChannel = state.channelListController.
                                    getPrivateChannels(presence.publicKey)[0];

                                if (defaultChannel) {
                                    this.openChannel(defaultChannel.id1)
                                }
                                else {
                                    showUserInfo(e);
                                }
                            }}
                            style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                            {presence.displayName}
                        </span>
                        <span if={presence.publicKey.equals(this.state.service.getPublicKey())} class="px-2 text-gray-400 text-sm italic">
                            (you)
                        </span>
                    </div>
                </div>
            </div>

            <div class="mb-8">
                <div class="px-4 mb-2 text-rubriker flex justify-between items-center">
                    <div class="opacity-75">
                        Public channels
                    </div>
                    <div>
                        <a onclick={newChannel}>
                            <svg class="fill-current h-4 w-4 opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M11 9h4v2h-4v4H9v-4H5V9h4V5h2v4zm-1 11a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16z" />
                            </svg>
                        </a>
                    </div>
                </div>
                <div style="min-height: 100px; max-height: 50%; overflow-y: scroll; scrollbar-width: thin; scrollbar-color: #0ac507 #484848;">
                    <div if={state.channelListController?.getChannels().length <= 0}
                        class="py-1 px-4 text-rubriker italic">
                        None available at the moment
                    </div>

                    <div each={channel in state.channelListController?.getChannels()}
                        class="py-1 px-4 bg-lankar text-rubriker">
                        # {channel.name}
                    </div>
                </div>
            </div>

            <div if={false} class="mb-8">
                <!-- TODO: TO BE REMOVED, LEAVING HERE FOR DEBUG PURPOSES -->
                <div class="flex px-4 mb-2 text-rubriker justify-between items-center">
                    <div class="opacity-75">
                        Direct Messages
                    </div>
                    <div>
                        <svg class="fill-current h-4 w-4 opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path d="M14 8a4 4 0 1 0-8 0v7h8V8zM8.027 2.332A6.003 6.003 0 0 0 4 8v6l-3 2v1h18v-1l-3-2V8a6.003 6.003 0 0 0-4.027-5.668 2 2 0 1 0-3.945 0zM12 18a2 2 0 1 1-4 0h4z" fill-rule="evenodd" />
                        </svg>
                    </div>
                </div>

                <div style="min-height: 100px; overflow-y: scroll; scrollbar-width: thin;">
                    <div each={item in state.channelListController?.getItems()}
                        if={item.data.isPrivate}
                        id="channel_{item.id1.toString("hex")}"
                        onclick={ () => this.openChannel(item.id1)}
                        class="flex items-center mb-3 px-4">


                        <template if={item.data.controller}>
                            <svg class="h-2 w-2 mr-2 fill-current text-green-500" viewBox="0 0 20 20"
                                if={state.presenceController?.isPresent(item.data.name) &&
                                    !state.channelListController.hasNotification(item.id1) }>
                                <circle cx="10" cy="10" r="10">
                            </svg>

                            <svg class="h-2 w-2 stroke-current text-rubriker mr-2" viewBox="0 0 22 22"
                                if={!state.presenceController?.isPresent(item.data.name) &&
                                    !state.channelListController.hasNotification(item.id1) }>
                                style="width: 22px">
                                <circle cx="10" cy="10" r="10" fill="none" stroke-width="3">
                            </svg>

                            <svg class="h-2 w-2 mr-2 fill-current text-red-500" viewBox="0 0 20 20"
                                if={state.channelListController.hasNotification(item.id1)}>
                                <circle cx="10" cy="10" r="10">
                            </svg>

                            <span class="text-rubriker opacity-75 {item.data.isActive ? "font-bold" : ""} text-ellipsis overflow-hidden">
                                {item.data.name}
                            </span>
                        </template>

                        <template if={!item.data.controller}>
                            <svg class="h-2 w-2 mr-2 fill-current text-green-500" viewBox="0 0 20 20"
                                if={state.presenceController?.isPresent(item.data.name)}>
                                <circle cx="10" cy="10" r="10">
                            </svg>

                            <svg class="h-2 w-2 stroke-current text-rubriker mr-2" viewBox="0 0 22 22"
                                if={!state.presenceController?.isPresent(item.data.name)}
                                style="width: 22px">
                                <circle cx="10" cy="10" r="10" fill="none" stroke-width="3">
                            </svg>

                            <span title="Notifications are not shown for unopened channels. Click to open channel."
                                class="text-rubriker opacity-75 text-ellipsis overflow-hidden italic">
                                {item.data.name}
                            </span>
                        </template>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main area: chat -->
        <div id="chatArea" class="flex flex-1 flex-col bg-white overflow-hidden">
            <!-- Channel header -->
            <div class="bg-bakgrund-1 border-b flex px-6 py-2 items-center flex-none">
                <div class="flex flex-col">
                    <div if={state.error} style="background-color: red;">
                        <p>Error: {state.error}</p>
                    </div>

                    <div if={!state.openOdin?.isOpened()}
                        style="display: block; background-color: orangered;">
                        <h1>
                            Please activate the OpenOdin Data Wallet browser extension
                            by clicking on the
                            <img src="gfx/openodin-logo.png" class="w-7 h-7 inline-block">
                            icon in your browser toolbar.
                        </h1>
                    </div>

                    <button if={state.openOdin?.isOpened() && !state.openOdin?.isAuthed() && !state.openOdin?.isPendingAuth() && !state.openOdin?.isClosed()}
                        type="button" onclick={ state.openOdin.auth } style="background-color: yellow">
                        Click here to request authorization from the Data Wallet.
                    </button>

                    <div if={state.openOdin?.isPendingAuth()}
                        style="display: block; background-color: orange;">
                        <h1>
                            Now, use the Data Wallet extension to accept or deny the authorization,
                            by clicking on the
                            <img src="gfx/openodin-logo.png" class="w-7 h-7 inline-block">
                            icon in your browser toolbar.
                        </h1>
                    </div>

                    <div if={state.service && !state.service.isRunning() && !state.service.isClosed()}
                        style="display: block; background-color: white;">
                        <button type="button" onclick={()=>state.service.start()}>Start Service</button>
                    </div>

                    <div if={state.openOdin?.isClosed()}
                        style="display: block; background-color: red;">
                        <h1>Logged out</h1>
                        <button type="button" onclick={() => initState(true)}>Restart auth process</button>
                    </div>

                    <div if={state.channelListController?.getActiveController()}>
                        <div class="text-rubriker opacity-75 text-ellipsis overflow-hidden">
                            {state.channelListController.getActiveController()?.getName()}
                        </div>

                        <button title="Save visible history to file"
                            onclick={()=>state.channelListController.getActiveController().saveHistory()}
                            class="border-2 border-lankar bg-lankar">
                            Save history
                        </button>
                    </div>
                </div>
            </div>

            <webchat-channel
                each={item in state.channelListController?.getItems()}
                if={item.data.controller}
                class="{item.data.isActive ? "flex flex-col flex-1 overflow-hidden" : "hidden"}"
                service={state.service}
                controller={item.data.controller}
                item={item}>
            </webchat-channel>
        </div>
    </div>
    <hr />

    <script>
        import * as riot from "riot";

        import WebChatDialogUserInfo from "./webchat-dialog-user-info.riot";

        export default {
            onBeforeMount(props, state) {
                ["mousemove", "keydown", "touchstart"].forEach( (eventName) => {
                    document.addEventListener(eventName, () => {
                        this.state.presenceController?.activityDetected();
                    }, true);
                });

                window.addEventListener("blur", () => this.state.notificationsController?.blurDetected() );
                window.addEventListener("focus", () => this.state.notificationsController?.focusDetected() );

                // Listen generally to messages and react to those of interest,
                // which are notifications sent from channels about new messages.
                window.addEventListener("message", (event) => this.state.notificationsController?.handleMessage(event.data) );

                // Disable drop in general.
                window.addEventListener("dragover", function(e) { e.preventDefault() });
                window.addEventListener("drop", function(e) { e.preventDefault() });

                this.initState();
            },

            async initState(doUpdate) {
                // The state model
                //
                this.state = {
                    openOdin: undefined,
                    service: undefined,
                    presenceController: undefined,
                    channelListController: undefined,
                    storageConnected: false,
                    connectedPeers: 0,
                };

                // Note: we are allowing config files to be fetched from any domain and location.
                //
                const jsonpath = new URLSearchParams(document.location.search).get("conf") ||
                    "app.json";

                console.debug("Loading JSON conf file:", jsonpath);

                let appConf;

                try {
                    appConf = await this.props.Globals.OpenOdin.LoadAppConf(jsonpath);
                }
                catch(e) {
                    console.error(`Could not load or parse ${jsonpath} JSON config file`, e);

                    return;
                }

                const autoAuth = true;
                const openOdin = new this.props.Globals.OpenOdin(appConf, autoAuth);

                openOdin.onOpen( () => {
                    this.update();
                });

                openOdin.onClose( () => {
                    this.update({
                        error: "Logged out",
                    });

                    this.initState(true);
                });

                openOdin.onPreAuth( (service) => {
                    this.update();
                });

                openOdin.onAuth( (service) => {
                    this.start(service);
                });

                openOdin.onAuthFail( (error) => {
                    console.error(error);

                    this.update({
                        error,
                    });
                });

                this.state = {...this.state, openOdin};

                if (doUpdate) {
                    this.update();
                }
            },

            start(service) {
                service.onStorageConnect( () => {
                    console.info("Connected to storage");

                    this.handleStorageConnect();
                });

                service.onStorageClose( () => {
                    console.info("Disconnected from storage");

                    this.handleStorageClose();
                });

                service.onStorageParseError( (error) => {
                    console.error("Could not parse storage configuraton", error.message);
                });


                service.onPeerConnect( (p2pClient) => {
                    this.state.connectedPeers++;

                    const pubKey = p2pClient.getRemotePublicKey();
                    console.info(`Peer connected: ${pubKey.toString("hex")}`);

                    p2pClient.onMessagingError( (message) => {
                        console.error("Error in peer", message);
                    });

                    p2pClient.onMessagingPong( (roundTripTime) => {
                        // TODO: show this round trip value in the UI instead of in the console.
                        //console.info("Ping/pong round trip time [ms]", roundTripTime);
                    });

                    this.update();
                });

                service.onPeerClose( (p2pClient) => {
                    this.state.connectedPeers--;

                    const pubKey = p2pClient.getRemotePublicKey();
                    console.info(`Peer disconnected: ${pubKey.toString("hex")}`);

                    this.update();
                });

                service.onPeerAuthCertError( (error, authCert) => {
                    console.warning("Peer's auth cert not valid");
                });

                service.onPeerParseError( (error) => {
                    console.error("Could not parse peer configuraton", error.message);
                });

                service.onPeerFactoryCreate( (handshakeFactory) => {
                    handshakeFactory.onSocketFactoryError( (name, error) => {
                        console.error("Socket error", name, error.message);
                    });

                    handshakeFactory.onHandshakeError( (error) => {
                        console.error("Handshake error", error.message);
                    });
                });

                service.onStop( () => {
                    this.state.presenceController?.close();
                    this.state.channelListController?.close();

                    this.update({
                        presenceController: undefined,
                        channelListController: undefined,
                        service: undefined,
                    });
                });

                service.start();

                this.update({
                    service,
                });
            },

            handleStorageConnect() {
                this.update({
                    storageConnected: true,
                });

                const presenceTemplate = this.state.service.getThreadTemplates().presence;
                this.state.presenceController = new this.props.Globals.PresenceController(this.state.service, presenceTemplate);
                this.state.presenceController.onUpdate(() => this.update()).onClose( () => console.info("Presence thread was closed") );

                this.state.notificationsController = new this.props.Globals.NotificationsController(document.title);

                this.state.notificationsController.onNotification( (notification) => {
                    if (notification.title) {
                        document.title = notification.title;
                    }
                });

                this.state.presenceController.onActive( () => this.state.notificationsController?.focusDetected() );
                this.state.presenceController.onInactive( () => this.state.notificationsController?.blurDetected() );

                const channelListTemplate = this.state.service.getThreadTemplates().channels;
                const messageTemplate = this.state.service.getThreadTemplates().channel;
                this.state.channelListController = new this.props.Globals.ChannelListController(this.state.service, channelListTemplate, messageTemplate);

                this.state.channelListController.onUpdate(() => this.update()).onClose( () => console.info("Channels thread was closed") );
            },

            handleStorageClose() {
                this.update({
                    storageConnected: false,
                });
            },

            async showUserInfo(event) {
                event.preventDefault();

                const publicKey = Buffer.from(event.target.id.split("_")[1], "hex");

                const modal = riot.component(WebChatDialogUserInfo)
                    (this.root.appendChild(document.createElement("DIV")), {publicKey});

                const ret = await modal.showModal();

                if (!ret) {
                    return;
                }

                if (ret.action === "message") {
                    const channelNode =
                        await this.state.channelListController.makePrivateChannel(publicKey, ret.name);

                    if (!channelNode) {
                        alert("Could not create channel");
                        return;
                    }

                    // TODO: optimize
                    setTimeout( () => this.openChannel(channelNode.getId1()), 1000);
                }
            },

            openChannel(nodeId1) {
                this.state.channelListController.openChannel(nodeId1);

                this.state.channelListController.setChannelActive(nodeId1);

                this.update();
            },

            // Not sure how to otherwise assign scope based variables in "each" loops.
            //
            setVariable(val) {
                this.tmpV = val;
                return "";
            },

            getVariable() {
                return this.tmpV;
            },
        }
    </script>
    <style>
        .activeUser {
            background-color: #535360;
            border-radius: 20px;
        }
        .presence-menu {
            position: relative;
        }
        .reaction-btn {
            display: inline-block;
        }
        .presence-content {
            display: none;
            position: absolute;
            background-color: #f1f1f1;
            min-width: 100px;
            min-height: 60px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            margin-top: -8px;
        }
        .presence-menu:hover .presence-content {
            display: inline-block;
        }
    </style>
</app>
